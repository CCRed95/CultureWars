// <auto-generated />
using System;
using CultureWars.Data.WordPress.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CultureWars.Migrations
{
    [DbContext(typeof(CoreContext))]
    partial class CoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.Comment", b =>
                {
                    b.Property<decimal>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_ID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CommentAgent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_agent")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CommentApproved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_approved")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("CommentAuthor")
                        .IsRequired()
                        .HasColumnName("comment_author")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CommentAuthorEmail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_author_email")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CommentAuthorIP")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_author_IP")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CommentAuthorUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_author_url")
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnName("comment_content")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("CommentDateGmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_date_gmt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("CommentKarma")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_karma")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal>("CommentParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_parent")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<decimal>("CommentPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_post_ID")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CommentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_type")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("''");

                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentAuthorEmail")
                        .HasName("comment_author_email");

                    b.HasIndex("CommentDateGmt")
                        .HasName("comment_date_gmt");

                    b.HasIndex("CommentParent")
                        .HasName("comment_parent");

                    b.HasIndex("CommentPostId")
                        .HasName("comment_post_ID");

                    b.HasIndex("CommentApproved", "CommentDateGmt")
                        .HasName("comment_approved_date_gmt");

                    b.ToTable("wp_comments");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.CommentMeta", b =>
                {
                    b.Property<decimal>("CommentMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("meta_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_id")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MetaKey")
                        .HasColumnName("meta_key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MetaValue")
                        .HasColumnName("meta_value")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("CommentMetaId");

                    b.HasIndex("CommentId")
                        .HasName("comment_id");

                    b.HasIndex("MetaKey")
                        .HasName("meta_key");

                    b.ToTable("wp_commentmeta");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.Link", b =>
                {
                    b.Property<decimal>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("LinkDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_description")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LinkImage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_image")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_name")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LinkNotes")
                        .IsRequired()
                        .HasColumnName("link_notes")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("LinkOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_owner")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("LinkRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_rating")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LinkRel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_rel")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LinkRss")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_rss")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LinkTarget")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_target")
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("LinkUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_updated")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_url")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LinkVisible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("link_visible")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'Y'");

                    b.HasKey("LinkId");

                    b.HasIndex("LinkVisible")
                        .HasName("link_visible");

                    b.ToTable("wp_links");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.Option", b =>
                {
                    b.Property<decimal>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("option_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Autoload")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("autoload")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'yes'");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("option_name")
                        .HasColumnType("varchar(191)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasColumnName("option_value")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("OptionId");

                    b.HasIndex("OptionName")
                        .IsUnique()
                        .HasName("option_name");

                    b.ToTable("wp_options");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.Post", b =>
                {
                    b.Property<decimal>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("CommentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_count")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CommentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_status")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'open'");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("guid")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<int>("MenuOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_order")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("PingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ping_status")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'open'");

                    b.Property<string>("Pinged")
                        .IsRequired()
                        .HasColumnName("pinged")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("PostAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_author")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnName("post_content")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("PostContentFiltered")
                        .IsRequired()
                        .HasColumnName("post_content_filtered")
                        .HasColumnType("varchar(MAX)");

                    b.Property<DateTime>("PostDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("PostDateGmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_date_gmt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("PostExcerpt")
                        .IsRequired()
                        .HasColumnName("post_excerpt")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("PostMimeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_mime_type")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("PostModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_modified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<DateTime>("PostModifiedGmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_modified_gmt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_name")
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("''");

                    b.Property<decimal?>("PostParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_parent")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("PostPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_password")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("PostStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_status")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'publish'");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnName("post_title")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_type")
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("'post'");

                    b.Property<string>("ToPing")
                        .IsRequired()
                        .HasColumnName("to_ping")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("PostId");

                    b.HasIndex("PostAuthor")
                        .HasName("post_author");

                    b.HasIndex("PostName")
                        .HasName("post_name");

                    b.HasIndex("PostParentId")
                        .HasName("post_parent");

                    b.HasIndex("PostType", "PostStatus", "PostDate", "PostId")
                        .HasName("type_status_date");

                    b.ToTable("wp_posts");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.PostMeta", b =>
                {
                    b.Property<decimal>("PostMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("meta_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("MetaKey")
                        .HasColumnName("meta_key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MetaValue")
                        .HasColumnName("meta_value")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("PostMetaId");

                    b.HasIndex("MetaKey")
                        .HasName("meta_key");

                    b.HasIndex("PostId")
                        .HasName("post_id");

                    b.ToTable("wp_postmeta");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.Term", b =>
                {
                    b.Property<decimal>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("term_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("''");

                    b.Property<long>("TermGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("term_group")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("TermId");

                    b.HasIndex("Name")
                        .HasName("name");

                    b.HasIndex("Slug")
                        .HasName("slug");

                    b.ToTable("wp_terms");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.TermMeta", b =>
                {
                    b.Property<decimal>("TermMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("meta_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("MetaKey")
                        .HasColumnName("meta_key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MetaValue")
                        .HasColumnName("meta_value")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("term_id")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("TermMetaId");

                    b.HasIndex("MetaKey")
                        .HasName("meta_key");

                    b.HasIndex("TermId")
                        .HasName("term_id");

                    b.ToTable("wp_termmeta");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.TermRelationship", b =>
                {
                    b.Property<decimal>("TermRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("object_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TermTaxonomyId")
                        .HasColumnName("term_taxonomy_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("TermOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("term_order")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("TermRelationshipId", "TermTaxonomyId");

                    b.HasIndex("TermTaxonomyId")
                        .HasName("term_taxonomy_id");

                    b.ToTable("wp_term_relationships");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.TermTaxonomy", b =>
                {
                    b.Property<decimal>("TermTaxonomyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("term_taxonomy_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("count")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("Parent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("parent")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Taxonomy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("taxonomy")
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("''");

                    b.Property<decimal>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("term_id")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("TermTaxonomyId");

                    b.HasIndex("Taxonomy")
                        .HasName("taxonomy");

                    b.HasIndex("TermId", "Taxonomy")
                        .IsUnique()
                        .HasName("term_id_taxonomy");

                    b.ToTable("wp_term_taxonomy");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.User", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("display_name")
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("UserActivationKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_activation_key")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_email")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_login")
                        .HasColumnType("varchar(60)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("UserNicename")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_nicename")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("''");

                    b.Property<string>("UserPass")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_pass")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("UserRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_registered")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("UserStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_status")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("UserUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_url")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("''");

                    b.HasKey("UserId");

                    b.HasIndex("UserEmail")
                        .HasName("user_email");

                    b.HasIndex("UserLogin")
                        .HasName("user_login_key");

                    b.HasIndex("UserNicename")
                        .HasName("user_nicename");

                    b.ToTable("wp_users");
                });

            modelBuilder.Entity("CultureWars.Data.WordPress.Domain.UserMeta", b =>
                {
                    b.Property<decimal>("UserMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("umeta_id")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("MetaKey")
                        .HasColumnName("meta_key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MetaValue")
                        .HasColumnName("meta_value")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("UserMetaId");

                    b.HasIndex("MetaKey")
                        .HasName("meta_key");

                    b.HasIndex("UserId")
                        .HasName("user_id");

                    b.ToTable("wp_usermeta");
                });
#pragma warning restore 612, 618
        }
    }
}
